class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int V = numCourses;
        //Make a graph
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++){
            adj.add(new ArrayList<>());
        }

        int m = prerequisites.length;
        for(int i = 0; i < m; i++){
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }

        //indegree
        int[] indegree = new int[V];
        for(int i = 0; i < V; i++){
            for(int it : adj.get(i)){
                indegree[it]++;
            }
        }

        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < V; i++){
            if(indegree[i] == 0){
                queue.add(i);
            }
        }

        List<Integer> result = new ArrayList<>();
        //iterate the queue
        while(!queue.isEmpty()){
            int node = queue.peek();
            queue.remove();
            result.add(node);

            //Now, remove node from indegree
            for(int it : adj.get(node)){
                indegree[it]--;
                if(indegree[it] == 0){
                    queue.add(it);
                }
            }
        }

        if(result.size() == V){
            return true;
        }

        return false;
    }
}
