class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][3];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 2; j++){
                Arrays.fill(dp[i][j], -1);
            }
        }

        return maxProfitUtil(prices, n, 0, 0, 2, dp);
    }

    public int maxProfitUtil(int[] prices, int n, int idx, int buy, int capacity, int[][][] dp){
        if(idx == n || capacity == 0){
            return 0;
        }

        if(dp[idx][buy][capacity] != -1){
            return dp[idx][buy][capacity];
        }

        int profit = 0;

        if(buy == 0){
            profit = Math.max(0 + maxProfitUtil(prices, n, idx + 1, 0, capacity, dp), -prices[idx] + maxProfitUtil(prices, n, idx + 1, 1, capacity, dp));
        }

        if(buy == 1){
            profit = Math.max(0 + maxProfitUtil(prices, n, idx + 1, 1, capacity, dp), prices[idx] + maxProfitUtil(prices, n, idx + 1, 0, capacity - 1, dp));
        }

        return dp[idx][buy][capacity] = profit;
    }
}
