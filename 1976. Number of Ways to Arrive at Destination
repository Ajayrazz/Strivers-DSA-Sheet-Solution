class Pair {
    int first;
    long second;
    public Pair(int first, long second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int mod = (int) 1e9 + 7;
    public int countPaths(int n, int[][] roads) {
        List<List<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }

        for(int[] edge : roads){
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];

            adj.get(u).add(new Pair(v, wt));
            adj.get(v).add(new Pair(u, wt));
        }

        long[] dist = new long[n];
        int[] ways = new int[n];

        Arrays.fill(dist, Long.MAX_VALUE);
        Arrays.fill(ways, 0);

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Long.compare(a.second, b.second));
        dist[0] = 0;
        ways[0] = 1;
        pq.add(new Pair(0, 0L));    // node, distance

        while(!pq.isEmpty()){
            int node = pq.peek().first;
            long distance = pq.peek().second;
            pq.poll();

            for(Pair current : adj.get(node)){
                int adjNode = current.first;
                long edgeWeight = current.second;

                if(edgeWeight + distance < dist[adjNode]){
                    dist[adjNode] = edgeWeight + distance;
                    ways[adjNode] = ways[node];
                    pq.add(new Pair(adjNode, dist[adjNode]));
                }
                else if(edgeWeight + distance == dist[adjNode]){
                    ways[adjNode] = (ways[adjNode] + ways[node]) % mod;
                }
            }
        }

        return ways[n - 1];
    }
}
