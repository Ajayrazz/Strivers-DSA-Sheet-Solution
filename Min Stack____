class MinStack {
    Stack<Long> stack;
    long min_val;

    public MinStack() {
        stack = new Stack<>();
        min_val = Long.MIN_VALUE;
    }
    
    public void push(int val) {
        long value = val;
        if(stack.isEmpty()){
            stack.push(value);
            min_val = value;
        }
        else {
            if(value < min_val){
                stack.push(2 * value - min_val);
                min_val = value;
            }
            else {
                stack.push(value);
            }
        }
    }
    
    public void pop() {
        if(stack.isEmpty()){
            return;
        }
        long value = stack.pop();
        if(value < min_val){
            min_val = 2 * min_val - value;
        }
    }
    
    public int top() {
        if(stack.isEmpty()){
            return -1;
        }
        long value = stack.peek();
        if(value <= min_val){
            return (int) min_val;
        }
        return (int) value;
    }
    
    public int getMin() {
        return (int) min_val;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
