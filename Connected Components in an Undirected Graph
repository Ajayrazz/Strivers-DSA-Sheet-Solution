
class Solution {
    public ArrayList<ArrayList<Integer>> getComponents(int V, int[][] edges) {
        // code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i <V; i++){
            adj.add(new ArrayList<>());
        }
        
        int[] vis = new int[V];
        
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        
        for(int i = 0; i < V; i++){
            if(vis[i] == 0){
                ArrayList<Integer> current = new ArrayList<>();
                dfs(i, adj, vis, current);
                //sort the current and add it to result
                Collections.sort(current);
                result.add(new ArrayList<>(current));
            }
        }
        
        return result;
    }
    
    public void dfs(int node, ArrayList<ArrayList<Integer>> adj, int[] visited, ArrayList<Integer> current){
        //visit
        visited[node] = 1;
        for(int adjNode : adj.get(node)){
            if(visited[adjNode] == 0){
                dfs(adjNode, adj, visited, current);
            }
        }
        
        current.add(node);
    }
}
