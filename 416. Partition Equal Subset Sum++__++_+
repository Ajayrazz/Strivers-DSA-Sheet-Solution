class Solution {
    public boolean canPartition(int[] nums) {
        int total_sum = 0;
        for(int num : nums){
            total_sum += num;
        }

        if(total_sum % 2 != 0){
            return false;
        }

        int target = total_sum / 2;

        int[][] dp = new int[nums.length][target + 1];
        //fill dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        //call the function and return it
        return subsetSumUtil(nums.length - 1, target, nums, dp);
    }

    //function for subsetSumUtil
    public boolean subsetSumUtil(int idx, int target, int[] nums, int[][] dp){
        //case 1
        if(target == 0){
            return true;
        }

        //case 2
        if(idx == 0){
            return nums[idx] == target;
        }

        //case 3
        if(dp[idx][target] != -1){
            return dp[idx][target] == 0 ? false : true;
        }

        boolean notTaken = subsetSumUtil(idx - 1, target, nums, dp);
        boolean taken = false;
        if(nums[idx] <= target){
            taken = subsetSumUtil(idx - 1, target - nums[idx], nums, dp);
        }

        //update dp
        dp[idx][target] = taken || notTaken ? 1 : 0;

        return taken || notTaken;
    }
}
