/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        //base case
        if(root == null){
            return 0;
        }

        int left_ht = height(root.left);
        int right_ht = height(root.right);
        int self_diameter = (left_ht + right_ht);

        int left_diam = diameterOfBinaryTree(root.left);
        int right_diam = diameterOfBinaryTree(root.right);

        return Math.max(self_diameter, Math.max(left_diam, right_diam));
    }

    //function to find the height of the binary tree
    public int height(TreeNode root){
        //base case
        if(root == null){
            return 0;
        }

        int leftheight = height(root.left);
        int rightheight = height(root.right);

        return Math.max(leftheight, rightheight) + 1;
    }
}
