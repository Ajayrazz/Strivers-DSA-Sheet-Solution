class Pair {
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

// User function Template for Java
class Solution {

    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++){
            adj.add(new ArrayList<Pair>());
        }
        
        for(int i = 0; i < E; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            
            adj.get(u).add(new Pair(v, wt));
        }
        
        int[] visited = new int[V];
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < V; i++){
            if(visited[i] == 0){
                topoSort(i, adj, visited, stack);
            }
        }
        
        int[] dist = new int[V];
        for(int i = 0; i < V; i++){
            dist[i] = (int)(1e9);
        }
        
        dist[0] = 0;
        while(!stack.isEmpty()){
            int node = stack.peek();
            stack.pop();
            
            // for(int i = 0; i < adj.get(node).size(); i++){
            //     int v = adj.get(node).get(i).first;
            //     int wt = adj.get(node).get(i).second;
                
            //     if(dist[node] + wt < dist[v]){
            //         dist[v] = wt + dist[node];
            //     }
            // }
            
            for(Pair it : adj.get(node)){
                int v = it.first;
                int wt = it.second;
                
                if(dist[node] + wt < dist[v]){
                    dist[v] = dist[node] + wt;
                }
            }
        }
        
        for(int i = 0; i < V; i++){
            if(dist[i] == 1e9){
                dist[i] = -1;
            }
        }
        
        return dist;
    }
    
    //Helper function for topological sorting
    private void topoSort(int node, ArrayList<ArrayList<Pair>> adj, int[] visited, Stack<Integer> stack){
        //visit
        visited[node] = 1;
        for(int i = 0; i < adj.get(node).size(); i++){
            int v = adj.get(node).get(i).first;
            if(visited[v] == 0){
                topoSort(v, adj, visited, stack);
            }
        }
        stack.push(node);
    }
}
