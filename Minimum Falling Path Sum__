class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length, m = matrix[0].length;
        int[][] dp = new int[n][m];
        //step 1
        for(int j = 0; j < m; j++){
            dp[0][j] = matrix[0][j];
        }

        for(int i = 1; i < n; i++){
            for(int j = 0; j < m; j++){
                int up = matrix[i][j] + dp[i - 1][j];
                int left_diag = matrix[i][j], right_diag = matrix[i][j];
                if(j > 0){
                    left_diag += dp[i - 1][j - 1];
                }
                else {
                    left_diag += (int) Math.pow(10, 9);
                }

                if(j < m - 1){
                    right_diag += dp[i - 1][j + 1];
                }
                else {
                    right_diag += (int) Math.pow(10, 9);
                }

                //update dp
                dp[i][j] = Math.min(up, Math.min(left_diag, right_diag));
            }
        }

        int min_val = Integer.MAX_VALUE;
        for(int j = 0; j < m; j++){
            min_val = Math.min(min_val, dp[n - 1][j]);
        }
        return min_val;
    }
}
