/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //map to store the element of inorder with their index
    public Map<Integer, Integer> map = new HashMap<>();
    int postorderIndex;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        //put the element of inorder with their index in map
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }
        //update the postorderIndex
        postorderIndex = postorder.length - 1;
        //call the helper function and return it
        return buildTree(postorder, 0, inorder.length - 1);
    }

    //function for constructing the binary tree
    public TreeNode buildTree(int[] postorder, int left, int right){
        //base case
        if(left > right) return null;
        int rootVal = postorder[postorderIndex--];
        TreeNode root = new TreeNode(rootVal);
        int inorderIndex = map.get(rootVal);

        root.right = buildTree(postorder, inorderIndex + 1, right);
        root.left = buildTree(postorder, left, inorderIndex - 1);

        return root;
    }
}
