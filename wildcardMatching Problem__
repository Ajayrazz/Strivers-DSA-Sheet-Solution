class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length(), m = p.length();
        int[][] dp = new int[n][m];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return wildcardMatching(n - 1, m - 1, s, p, dp) == 1;
    }
    
    //wildcardMatching function
    public int wildcardMatching(int i, int j, String s, String p, int[][] dp){
        //case 1 : when both string and pattern is empty
        if(i < 0 && j < 0) return 1;
        //case 2 : when pattern is empty
        if(i >= 0 && j < 0) return 0;
        //case 3 : when string is not empty
        if(i < 0 && j >= 0) return allStar(p, j) ? 1 : 0;

        if(dp[i][j] != -1) return dp[i][j];
        if(s.charAt(i) == p.charAt(j) || p.charAt(j) == '?'){
            return dp[i][j] = wildcardMatching(i - 1, j - 1, s, p, dp);
        }
        else if(p.charAt(j) == '*'){
            return dp[i][j] = (wildcardMatching(i - 1, j, s, p, dp) == 1 || wildcardMatching(i, j - 1, s, p, dp) == 1) ? 1 : 0;
        }
        else {
            return dp[i][j] = 0;
        }
    }

    //allStar function
    public boolean allStar(String p, int j){
        for(int i = 0; i <= j; i++){
            if(p.charAt(i) != '*') return false;
        }
        return  true;
    }
}
