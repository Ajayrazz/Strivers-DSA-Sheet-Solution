class Solution {
    public int maximalRectangle(char[][] matrix) {
        //base case
        if(matrix == null || (matrix.length == 0 && matrix[0].length == 0)) return 0;
        int[] heights = new int[matrix[0].length];
        int max_area = 0;
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                if(matrix[i][j] == '1'){
                    heights[j]++;
                }
                else {
                    heights[j] = 0;
                }
            }

            //update max_area
            max_area = Math.max(max_area, Histogram(heights));
        }

        return max_area;
    }

    //Histogram Function
    public int Histogram(int[] heights){
        Stack<Integer> stack = new Stack<>();
        int max_area = 0;
        for(int i = 0; i <= heights.length; i++){
            while(!stack.isEmpty() && (i == heights.length || heights[stack.peek()] > heights[i])){
                int prev = heights[stack.pop()];
                int width;
                if(stack.isEmpty()){
                    width = i;
                }
                else {
                    width = i - stack.peek() - 1;
                }

                int area = prev * width;
                //update max_area
                max_area = Math.max(max_area, area);
            }
            stack.push(i);
        }

        return max_area;
    }
}
