class Pair {
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        // code here
        List<List<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            
            adj.get(u).add(new Pair(v, wt));
            adj.get(v).add(new Pair(u, wt));    // undirected
        }
        
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        
        //sort pq based on distance in increasing order
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.second - b.second);
        pq.add(new Pair(src, 0));
        
        while(!pq.isEmpty()){
            int node = pq.peek().first;
            pq.poll();
            
            for(Pair current : adj.get(node)){
                int adjNode = current.first;
                int wt = current.second;
                
                if(dist[node] != Integer.MAX_VALUE && dist[node] + wt < dist[adjNode]){
                    dist[adjNode] = dist[node] + wt;
                    pq.add(new Pair(adjNode, dist[adjNode]));
                }
            }
        }
        
        return dist;
    }
}
