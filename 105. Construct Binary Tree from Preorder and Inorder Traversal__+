/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //map to store the element of inorder Array along with their index
    public Map<Integer, Integer> map = new HashMap<>();
    int preorderIndex = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        //store element of inorder with its index in map
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }

        //call the helper function and return it
        return buildTree(preorder, 0, inorder.length - 1);
    }

    //Function to construct binary tree
    private TreeNode buildTree(int[] preorder, int left, int right){
        //base case
        if(left > right) return null;
        int rootVal = preorder[preorderIndex++];
        TreeNode root = new TreeNode(rootVal);
        int inorderIndex = map.get(rootVal);

        root.left = buildTree(preorder, left, inorderIndex - 1);
        root.right = buildTree(preorder, inorderIndex + 1, right);

        return root;
    }
}
