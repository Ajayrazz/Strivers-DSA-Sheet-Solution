class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        //base case
        if(nums == null || k <= 0) return new int[0];

        int n = nums.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> deque = new ArrayDeque<>();

        for(int i = 0; i < n; i++){
            //remove index that are out of the bound
            while(!deque.isEmpty() && deque.peek() < i - k + 1){
                deque.poll();
            }

            //remove index whose corresponding values are less than nums[i]
            while(!deque.isEmpty() && nums[deque.peekLast()] < nums[i]){
                deque.pollLast();
            }

            //add current index
            deque.offer(i);

            if(i >= k - 1){
                result[i - k + 1] = nums[deque.peek()];
            }
        }

        return result;
    }
}
