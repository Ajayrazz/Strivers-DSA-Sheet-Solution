class Twitter {
    class Tweet {
        int tweetId;
        int time;
        public Tweet(int tweetId, int time){
            this.tweetId = tweetId;
            this.time = time;
        }
    }
    //global timestamp to keep track of tweet order
    public int timestamp;
    //map from user to their tweet
    public Map<Integer, List<Tweet>> userTweets;
    //map from user to a set of user they follow
    public Map<Integer, Set<Integer>> userFollows;

    public Twitter() {
        timestamp = 0;
        userTweets = new HashMap<>();
        userFollows = new HashMap<>();    
    }
    
    public void postTweet(int userId, int tweetId) {
        userTweets.putIfAbsent(userId, new ArrayList<>());
        userTweets.get(userId).add(new Tweet(tweetId, timestamp++));
    }
    
    public List<Integer> getNewsFeed(int userId) {
        //custom comparator to build a maxHeap based on timestamp
        PriorityQueue<Tweet> maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b.time, a.time));

        //include user's own tweet
        if(userTweets.containsKey(userId)){
            maxHeap.addAll(userTweets.get(userId));
        }

        //include tweets from user the user is following
        if(userFollows.containsKey(userId)){
            for(int followeeId : userFollows.get(userId)){
                if(userTweets.containsKey(followeeId)){
                    maxHeap.addAll(userTweets.get(followeeId));
                }
            }
        }

        List<Integer> result = new ArrayList<>();
        int count = 0;
        while(!maxHeap.isEmpty() && count < 10){
            result.add(maxHeap.poll().tweetId);
            count++;
        }

        return result;
    }
    
    public void follow(int followerId, int followeeId) {
        if(followerId == followeeId) return;
        userFollows.putIfAbsent(followerId, new HashSet<>());
        userFollows.get(followerId).add(followeeId);
    }
    
    public void unfollow(int followerId, int followeeId) {
        if(userFollows.containsKey(followerId)){
            userFollows.get(followerId).remove(followeeId);
        }
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
