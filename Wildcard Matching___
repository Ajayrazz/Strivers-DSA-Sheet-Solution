class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length();
        int m = p.length();
        int[][] dp = new int[n][m];
        //fill dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return wildcardMatching(n - 1, m - 1, s, p, dp) == 1;
    }

    //wildcardMatching Function
    public int wildcardMatching(int i, int j, String s, String p, int[][] dp){
        //case 1 : when both string and pattern are empty
        if(i < 0 && j < 0) return 1;
        //case 2 : when pattern is empty
        if(j < 0 && i >= 0) return 0;
        //case 3 : when string is empty
        if(i < 0 && j >= 0) return allStar(p, j) ? 1 : 0;

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        if(p.charAt(j) == s.charAt(i) || p.charAt(j) == '?'){
            return dp[i][j] = wildcardMatching(i - 1, j - 1, s, p, dp);
        }
        else if(p.charAt(j) == '*'){
            return dp[i][j] = (wildcardMatching(i - 1, j, s, p, dp) == 1 || wildcardMatching(i, j - 1, s, p, dp) == 1) ? 1 : 0;
        }
        else {
            return dp[i][j] = 0;
        }
    }

    //allStar function
    public boolean allStar(String p, int j){
        for(int i = 0; i <= j; i++){
            if(p.charAt(i) != '*'){
                return false;
            }
        }
        return true;
    }
}
