class Solution {
    public int longestKSubstr(String s, int k) {
        int n = s.length();
        int left = 0, max_len = -1; 
        Map<Character, Integer> freq = new HashMap<>();
        
        for (int right = 0; right < n; right++) {
            char ch = s.charAt(right);
            freq.put(ch, freq.getOrDefault(ch, 0) + 1);
            
            // shrink window if more than k distinct chars
            while (freq.size() > k) {
                char leftChar = s.charAt(left);
                freq.put(leftChar, freq.get(leftChar) - 1);
                if (freq.get(leftChar) == 0) {
                    freq.remove(leftChar);
                }
                left++;
            }
            
            // check if window has exactly k distinct chars
            if (freq.size() == k) {
                max_len = Math.max(max_len, right - left + 1);
            }
        }
        
        return max_len;
    }
}
