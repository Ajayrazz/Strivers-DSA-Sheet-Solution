class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        
        return uniquePathUtil(0, 0, n, m, obstacleGrid, dp);
    }

    //Function for finding the unique path
    private int uniquePathUtil(int i, int j, int n, int m, int[][] grid, int[][] dp){
        if(i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == 1){
            return 0;
        }
        
        if(i == n - 1 && j == m - 1){
            dp[i][j] = 1;
            return dp[i][j];
        }

        if(dp[i][j] != 0){
            return dp[i][j];
        }

        int move_right = uniquePathUtil(i, j + 1, n, m, grid, dp);
        int move_down = uniquePathUtil(i + 1, j, n, m, grid, dp);

        dp[i][j] = move_right + move_down;
        return dp[i][j];
    }

}
