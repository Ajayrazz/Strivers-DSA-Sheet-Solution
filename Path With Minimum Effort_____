class Tuple {
    int distance;
    int row;
    int col;
    public Tuple(int distance, int row, int col){
        this.distance = distance;
        this.row = row;
        this.col = col;
    }
}

class Solution {
    public int minimumEffortPath(int[][] heights) {
        //base case
        if(heights == null || (heights.length == 0 && heights[0].length == 0)) return 0;
        int n = heights.length, m = heights[0].length;
        int[][] dist = new int[n][m];
        for(int[] row : dist){
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dist[0][0] = 0;

        int[] dx = {1, 0, 0, -1};
        int[] dy = {0, -1, 1, 0};

        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> Integer.compare(a.distance, b.distance));
        pq.add(new Tuple(0, 0, 0));
        while(!pq.isEmpty()){
            int distance = pq.peek().distance;
            int row = pq.peek().row;
            int col = pq.peek().col;
            pq.poll();

            if(row == n - 1 && col == m - 1){
                return distance;
            }

            for(int index = 0; index < 4; index++){
                int nRow = row + dx[index];
                int nCol = col + dy[index];
                if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m){
                    int newEffort = Math.max(Math.abs(heights[row][col] - heights[nRow][nCol]), distance);
                    if(newEffort < dist[nRow][nCol]){
                        dist[nRow][nCol] = newEffort;
                        pq.add(new Tuple(newEffort, nRow, nCol));
                    }
                }
            }
        }
        return 0;
    }
}
