class Solution {
    public List<List<String>> partition(String s) {
        //base case
        if(s.length() == 0) return new ArrayList<>();
        List<List<String>> result = new ArrayList<>();
        Helper(0, s, result, new ArrayList<>());
        //return it
        return result;
    }

    public void Helper(int index, String s, List<List<String>> result, List<String> current){
        //base case
        if(index == s.length()){
            result.add(new ArrayList<>(current));
            return;
        }

        for(int i = index; i < s.length(); i++){
            if(isPalindrome(s, index, i)){
                current.add(s.substring(index, i + 1));
                //recall the function
                Helper(i + 1, s, result, current);
                //remove the last element
                current.remove(current.size() - 1);
            }
        }
    }

    //isPalindrome function
    public boolean isPalindrome(String s, int i, int j){
        while(i < j){
            if(s.charAt(i) != s.charAt(j))
            return false;

            i++;
            j--;
        }
        return true;
    }
}
