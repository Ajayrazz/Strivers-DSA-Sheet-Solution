class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }

    //Helper Function For Making The Sudoku
    private boolean solve(char[][] board){
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] == '.'){
                    for(char num = '1'; num <= '9'; num++){
                        if(isValid(board, i, j, num)){
                            //Make the changes
                            board[i][j] = num;
                            //recall the function
                            if(solve(board)){
                                return true;
                            }
                            //Revert The Changes
                            board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    //Helper Function To Check Whether The Sudoku Is Valid Or Not
    private boolean isValid(char[][] board, int row, int col, char num){
        //checking 9*9 
        for(int i = 0; i < 9; i++){
            if(board[i][col] == num || board[row][i] == num){
                return false;
            }
        }

        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;

        for(int i = startRow; i < startRow + 3; i++){
            for(int j = startCol; j < startCol + 3; j++){
                if(board[i][j] == num){
                    return false;
                }
            }
        }
        return true;
    }
}
