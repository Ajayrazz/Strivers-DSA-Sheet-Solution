/*
class Node
{
    int data; //data of the node
    int hd; //horizontal distance of the node
    Node left, right; //left and right references

    // Constructor of tree node
    public Node(int key)
    {
        data = key;
        hd = Integer.MAX_VALUE;
        left = right = null;
    }
}
*/

class Pair {
    Node node;
    int hd;
    public Pair(Node node, int hd){
        this.node = node;
        this.hd = hd;
    }
}

class Solution {
    public ArrayList<Integer> bottomView(Node root) {
        // Code here
        //base case
        if(root == null){
            return new ArrayList<>();
        }
        
        ArrayList<Integer> result = new ArrayList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root, 0));
        
        while(!queue.isEmpty()){
            Pair current = queue.poll();
            Node node = current.node;
            int line = current.hd;
            
            map.put(line, node.data);
            
            //add children
            if(node.left != null){
                queue.add(new Pair(node.left, line - 1));
            }
            
            if(node.right != null){
                queue.add(new Pair(node.right, line + 1));
            }
        }
        
        result.addAll(map.values());
        
        return result;
    }
}
