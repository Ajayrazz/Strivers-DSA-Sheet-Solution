class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int total_sum = 0;
        for(int val : nums){
            total_sum += val;
        }

        if(total_sum - target < 0){
            return 0;
        }

        if((total_sum - target) % 2 == 1){
            return 0;
        }

        int s2 = (total_sum - target) / 2;
        int[][] dp = new int[nums.length][s2 + 1];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return countPartitionUtil(nums.length - 1, s2, nums, dp);
    }

    //CountPartitionUtil Function
    private int countPartitionUtil(int idx, int target, int[] arr, int[][] dp){
        //base case
        if(idx == 0){
            if(target == 0 && arr[0] == 0){
                return 2;
            }

            if(target == 0 || target == arr[0]){
                return 1;
            }

            return 0;
        }

        if(dp[idx][target] != -1){
            return dp[idx][target];
        }

        int notTaken = countPartitionUtil(idx - 1, target, arr, dp);
        int taken = 0;
        
        if(arr[idx] <= target){
            taken = countPartitionUtil(idx - 1, target - arr[idx], arr, dp);
        }

        return dp[idx][target] = (taken + notTaken);
    }
}
