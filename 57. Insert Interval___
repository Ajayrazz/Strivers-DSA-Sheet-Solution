class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> result = new ArrayList<>();
        int index = 0;

        //step 1 - add all the intervals whose end time is less than start time of new Intervals
        while(index < intervals.length && intervals[index][1] < newInterval[0]){
            result.add(intervals[index]);
            index++;
        }

        //step 2 - merge intervals
        while(index < intervals.length && intervals[index][0] <= newInterval[1]){
            newInterval[0] = Math.min(newInterval[0], intervals[index][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[index][1]);
            index++;
        }
        //add newInterval to result
        result.add(newInterval);

        //step 3 - add rest intervals
        while(index < intervals.length){
            result.add(intervals[index]);
            index++;
        }

        return result.toArray(new int[result.size()][]);
    }
}
