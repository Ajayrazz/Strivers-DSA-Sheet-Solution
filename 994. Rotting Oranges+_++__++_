class Solution {
    public int orangesRotting(int[][] grid) {
        //base case
        if(grid == null || grid.length == 0) return 0;
        int rows = grid.length, cols = grid[0].length;
        int fresh_count = 0;
        //Queue to store the position of the rotten orange
        Queue<int[]> queue = new LinkedList<>();

        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(grid[i][j] == 2){
                    queue.offer(new int[]{i, j});
                }

                if(grid[i][j] != 0){
                    fresh_count += 1;
                }
            }
        }

        if(fresh_count == 0) return 0;
        int count = 0, min_count = 0;
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};

        //Breadth First Search Starting from initially rotten orange
        while(!queue.isEmpty()){
            int size = queue.size();
            count += size;
            for(int i = 0; i < size; i++){
                int[] points = queue.poll();
                for(int j = 0; j < 4; j++){
                    int x = points[0] + dx[j];
                    int y = points[1] + dy[j];

                    if(x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0 || grid[x][y] == 2){
                        continue;
                    }

                    //make it rotten
                    grid[x][y] = 2;
                    queue.offer(new int[]{x, y});
                }
            }

            if(queue.size() != 0){
                min_count += 1;
            }
        }

        return fresh_count == count ? min_count : -1;
    }
}
