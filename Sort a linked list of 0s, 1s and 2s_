/* class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        next = null;
    }
}*/

class Solution {
    static Node segregate(Node head) {
        if (head == null || head.next == null) return head;

        // Dummy heads for 0,1,2 lists
        Node zeroD = new Node(-1);
        Node oneD = new Node(-1);
        Node twoD = new Node(-1);

        // Current tails
        Node zero = zeroD, one = oneD, two = twoD;

        // Traverse list and distribute nodes
        Node current = head;
        while (current != null) {
            if (current.data == 0) {
                zero.next = current;
                zero = zero.next;
            } else if (current.data == 1) {
                one.next = current;
                one = one.next;
            } else {
                two.next = current;
                two = two.next;
            }
            current = current.next;
        }

        // Connect the three lists
        zero.next = (oneD.next != null) ? oneD.next : twoD.next;
        one.next = twoD.next;
        two.next = null; // important to avoid cycle

        // New head
        return zeroD.next;
    }
}
