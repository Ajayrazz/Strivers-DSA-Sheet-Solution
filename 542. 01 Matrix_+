class Pair {
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int[][] dist = new int[n][m];
        Queue<Pair> queue = new LinkedList<>();

        //iterate element of mat
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(mat[i][j] == 0){
                    dist[i][j] = 0;
                    queue.add(new Pair(i, j));
                }
                else {
                    dist[i][j] = -1;
                }
            }
        }

        int[] delRow = {-1, 0, 1, 0};
        int[] delCol = {0, 1, 0, -1};
        //Iterate the queue
        while(!queue.isEmpty()){
            int row = queue.peek().first;
            int col = queue.peek().second;
            queue.remove();

            for(int i = 0; i < 4; i++){
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];

                if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && dist[nRow][nCol] == -1){
                    //make changes
                    dist[nRow][nCol] = dist[row][col] + 1;
                    queue.offer(new Pair(nRow, nCol));
                }
            }
        }
        return dist;
    }
}
