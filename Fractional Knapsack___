class Solution {
    public double fractionalKnapsack(int[] val, int[] wt, int capacity) {
        // code here
        int n = val.length;
        double[][] ratio = new double[n][2];
        for(int i = 0; i < n; i++){
            ratio[i][0] = (double) val[i] / wt[i];
            ratio[i][1] = i;
        }
        //sort ratio based on first index in decreasing order
        Arrays.sort(ratio, (a, b) -> Double.compare(b[0], a[0]));
        int remaining_wt = capacity;
        double max_val = 0;
        for(int i = 0; i < n; i++){
            int index = (int) ratio[i][1];
            int current_wt = wt[index];
            int current_val = val[index];
            
            if(current_wt <= remaining_wt){
                remaining_wt -= current_wt;
                max_val += current_val;
            }
            else {
                double fraction = (double) remaining_wt / current_wt;
                max_val += (fraction * current_val);
                remaining_wt = 0;
            }
        }
        return max_val;
    }
}
