class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return maxProfitUtil(prices, 0, 0, n, dp);
    }

    public int maxProfitUtil(int[] prices, int idx, int buy, int n, int[][] dp){
        //base case
        if(idx == n){
            return 0;
        }

        if(dp[idx][buy] != -1){
            return dp[idx][buy];
        }

        int profit = 0;

        if(buy == 0){
            profit = Math.max(0 + maxProfitUtil(prices, idx + 1, 0, n, dp), -prices[idx] + maxProfitUtil(prices, idx + 1, 1, n, dp));
        }
        else {
            profit = Math.max(0 + maxProfitUtil(prices, idx + 1, 1, n, dp), prices[idx] + maxProfitUtil(prices, idx + 1, 0, n, dp));
        }

        return dp[idx][buy] = profit;
    }
}
