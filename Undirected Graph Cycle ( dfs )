class Solution {
    
    // Function to detect cycle in an undirected graph using DFS
    private boolean dfs(int node, int parent, int[] visited, List<List<Integer>> adj) {
        visited[node] = 1;
        for (int adjacentNode : adj.get(node)) {
            if (visited[adjacentNode] == 0) {
                if (dfs(adjacentNode, node, visited, adj)) {
                    return true;
                }
            } else if (adjacentNode != parent) {
                // Cycle detected
                return true;
            }
        }
        return false;
    }

    public boolean isCycle(int V, int[][] edges) {
        // Build adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        int[] visited = new int[V];
        for (int i = 0; i < V; i++) {
            if (visited[i] == 0) {
                if (dfs(i, -1, visited, adj)) {
                    return true;
                }
            }
        }

        return false;
    }
}
