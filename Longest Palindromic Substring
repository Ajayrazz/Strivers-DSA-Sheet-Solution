import java.util.* ;
import java.io.*; 
public class Solution 
{
    public static String longestPalinSubstring(String str) 
    {
        if (str == null || str.length() == 0) {
            return "";
        }
        
        int start = 0;
        int maxLength = 1;
        
        for (int i = 0; i < str.length(); i++) {
            // Check for odd length palindromes (center at i)
            int len1 = expandAroundCenter(str, i, i);
            
            // Check for even length palindromes (center between i and i+1)
            int len2 = expandAroundCenter(str, i, i + 1);
            
            // Get the maximum length from both cases
            int currentMaxLength = Math.max(len1, len2);
            
            // Update the result if we found a longer palindrome
            if (currentMaxLength > maxLength) {
                maxLength = currentMaxLength;
                start = i - (currentMaxLength - 1) / 2;
            }
        }
        
        return str.substring(start, start + maxLength);
    }
    
    private static int expandAroundCenter(String str, int left, int right) {
        // Expand around the center while characters match
        while (left >= 0 && right < str.length() && str.charAt(left) == str.charAt(right)) {
            left--;
            right++;
        }
        
        // Return the length of the palindrome
        return right - left - 1;
    }
}
