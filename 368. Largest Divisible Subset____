class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        //sort nums
        Arrays.sort(nums);
        int n = nums.length;
        int[][] dp = new int[n][n + 1];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        Helper(0, -1, nums, dp);
        List<Integer> result = new ArrayList<>();
        int index = 0, prev_index = -1;
        while(index < nums.length){
            int take_len = Integer.MIN_VALUE;
            if(prev_index == -1 || nums[index] % nums[prev_index] == 0){
                int next_len = index + 1 < nums.length ? dp[index + 1][index + 1] : 0;
                take_len = 1 + next_len;

                if(take_len != Integer.MIN_VALUE && take_len == dp[index][prev_index + 1]){
                    result.add(nums[index]);
                    prev_index = index;
                }
            }
            index++;
        }

        return result;
    }

    //Helper Function
    public int Helper(int index, int prev_index, int[] nums, int[][] dp){
        //case 1
        if(index == nums.length) return 0;
        //case 2
        if(dp[index][prev_index + 1] != -1) return dp[index][prev_index + 1];

        int notTake = Helper(index + 1, prev_index, nums, dp);
        int take = 0;
        if(prev_index == -1 || nums[index] % nums[prev_index] == 0){
            take = 1 + Helper(index + 1, index, nums, dp);
        }

        return dp[index][prev_index + 1] = Math.max(take, notTake);
    }
}
