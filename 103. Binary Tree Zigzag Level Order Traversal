/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        //base case
        if(root == null) {
            return new ArrayList<>();
        }

        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int level = 0;

        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            level += 1;
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                temp.add(node.val);

                //case 1 - check left subtree
                if(node.left != null){
                    queue.add(node.left);
                }

                //case 2 - check right subtree
                if(node.right != null){
                    queue.add(node.right);
                }
            }
            //case 3 - check for reversing
            if(level % 2 == 0){
                Collections.reverse(temp);
            }
            ans.add(temp);
        }

        return ans;
    }
}
