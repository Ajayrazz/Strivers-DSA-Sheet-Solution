// User function Template for Java

class Pair {
    int node;
    int weight;
    public Pair(int node, int weight){
        this.node = node;
        this.weight = weight;
    }
}

class Solution {

    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        List<List<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            
            adj.get(u).add(new Pair(v, wt));
        }
        
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[V];
        for(int i = 0; i < V; i++){
            if(!visited[i]){
                topoSort(i, adj, stack, visited);
            }
        }
        
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;
        
        while(!stack.isEmpty()){
            int u = stack.pop();
            for(int i = 0; i < adj.get(u).size(); i++){
                int v = adj.get(u).get(i).node;
                int wt = adj.get(u).get(i).weight;
                
                if(dist[u] != Integer.MAX_VALUE && dist[u] + wt < dist[v]){
                    dist[v] = dist[u] + wt;
                }
            }
        }
        
        for(int i = 0; i < V; i++){
            if(dist[i] == Integer.MAX_VALUE){
                dist[i] = -1;
            }
        }
        
        return dist;
    }
    
    //topoSort function
    public void topoSort(int node, List<List<Pair>> adj, Stack<Integer> stack, boolean[] visited){
        //visit
        visited[node] = true;
        for(int i = 0; i < adj.get(node).size(); i++){
            int v = adj.get(node).get(i).node;
            
            if(!visited[v]){
                topoSort(v, adj, stack, visited);
            }
        }
        
        stack.push(node);
    }
}
