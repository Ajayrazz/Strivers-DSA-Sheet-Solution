class Tuple {
    int distance;
    int row;
    int col;

    public Tuple(int distance, int row, int col) {
        this.distance = distance;
        this.row = row;
        this.col = col;
    }
}

class Solution {
    public int swimInWater(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;

        int n = grid.length;
        int[][] dist = new int[n][n];
        for (int[] row : dist) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }

        dist[0][0] = grid[0][0];

        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);
        pq.add(new Tuple(grid[0][0], 0, 0));

        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};

        while (!pq.isEmpty()) {
            Tuple current = pq.poll();
            int distance = current.distance;
            int row = current.row;
            int col = current.col;

            if (row == n - 1 && col == n - 1) {
                return distance;
            }

            for (int i = 0; i < 4; i++) {
                int nRow = row + dx[i];
                int nCol = col + dy[i];

                if (nRow >= 0 && nCol >= 0 && nRow < n && nCol < n) {
                    int newDist = Math.max(distance, grid[nRow][nCol]);
                    if (newDist < dist[nRow][nCol]) {
                        dist[nRow][nCol] = newDist;
                        pq.add(new Tuple(newDist, nRow, nCol));
                    }
                }
            }
        }

        return -1; // should never reach here
    }
}
