class Pair {
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Graph {
    public List<List<Pair>> adj = new ArrayList<>();
    public int V;
    public Graph(int n, int[][] edges) {
        this.V = n;
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }

        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];

            adj.get(u).add(new Pair(v, wt));    // directed weighted graph
        }
    }
    
    public void addEdge(int[] edge) {
        adj.get(edge[0]).add(new Pair(edge[1], edge[2]));
    }
    
    public int shortestPath(int node1, int node2) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[node1] = 0;

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Integer.compare(a.second, b.second));
        pq.add(new Pair(node1, 0));
        while(!pq.isEmpty()){
            int node = pq.peek().first;
            int distance = pq.peek().second;
            pq.poll();

            for(Pair current : adj.get(node)){
                int adjNode = current.first;
                int edW = current.second;

                if(distance + edW < dist[adjNode]){
                    //update dist
                    dist[adjNode] = distance + edW;
                    pq.add(new Pair(adjNode, dist[adjNode]));
                }
            }
        }

        return dist[node2] != Integer.MAX_VALUE ? dist[node2] : -1;
    }
}

/**
 * Your Graph object will be instantiated and called as such:
 * Graph obj = new Graph(n, edges);
 * obj.addEdge(edge);
 * int param_2 = obj.shortestPath(node1,node2);
 */
