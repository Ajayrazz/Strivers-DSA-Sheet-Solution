class Solution {
    public int minCost(int n, int[] cuts) {
        int c = cuts.length;
        List<Integer> cut_p = new ArrayList<>();
        for(int cut : cuts){
            cut_p.add(cut);
        }

        cut_p.add(0);
        cut_p.add(n);
        //sort it
        Collections.sort(cut_p);

        int[][] dp = new int[c + 1][c + 1];
        //fill dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return Helper(1, c, cut_p, dp);
    }

    public int Helper(int i, int j, List<Integer> cut_p, int[][] dp){
        if(i > j) return 0;
        if(dp[i][j] != -1) return dp[i][j];

        int min_val = Integer.MAX_VALUE;
        for(int idx = i; idx <= j; idx++){
            int ans = cut_p.get(j + 1) - cut_p.get(i - 1) + Helper(i, idx - 1, cut_p, dp) + Helper(idx + 1, j, cut_p, dp);

            min_val = Math.min(min_val, ans);
        }

        return dp[i][j] = min_val;
    }
}
