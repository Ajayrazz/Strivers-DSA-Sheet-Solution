class Solution {
    public int totalNQueens(int n) {
        int[] left_row = new int[n];
        int[] lower_diag = new int[2 * n - 1];
        int[] upper_diag = new int[2 * n - 1];
        return totalNQueenUtil(0, n, left_row, lower_diag, upper_diag);
    }

    //totalNQueenUtil function
    public int totalNQueenUtil(int col, int n, int[] left_row, int[] lower_diag, int[] upper_diag){
        //base case
        if(col == n) return 1;

        int count = 0;
        for(int row = 0; row < n; row++){
            if(left_row[row] == 0 && lower_diag[row + col] == 0 && upper_diag[n - 1 + col - row] == 0){
                //make changes
                left_row[row] = 1;
                lower_diag[row + col] = 1;
                upper_diag[n - 1 + col - row] = 1;
                //recall function
                count += totalNQueenUtil(col + 1, n, left_row, lower_diag, upper_diag);
                //revert changes
                left_row[row] = 0;
                lower_diag[row + col] = 0;
                upper_diag[n - 1 + col - row] = 0;
            }
        }
        return count;
    }
}
