class Solution
{
    private int timer = 1;
    
    private void dfs(int node, int parent, int[] visited, int[] tim, int[] low, int[] mark, ArrayList<ArrayList<Integer>> adj){
        //visit
        visited[node] = 1;
        tim[node] = low[node] = timer;
        timer++;
        int child = 0;
        
        for(Integer it : adj.get(node)){
            if(it == parent) continue;
            if(visited[it] == 0){
                dfs(it, node, visited, tim, low, mark, adj);
                low[node] = Math.min(low[node], low[it]);
                
                if(low[it] >= tim[node] && parent != -1){
                    mark[node] = 1;
                }
                child++;
            }
            else {
                low[node] = Math.min(low[node], tim[it]);
            }
        }
        
        if(child > 1 && parent == -1){
            mark[node] = 1;
        }
    }
    
    
    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
    {
        // Code here
        int[] visited = new int[V];
        int[] tim = new int[V];
        int[] low = new int[V];
        int[] mark = new int[V];
        
        for(int i = 0; i < V; i++){
            if(visited[i] == 0){
                dfs(i, -1, visited, tim, low, mark, adj);
            }
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = 0; i < V; i++){
            if(mark[i] == 1){
                ans.add(i);
            }
        }
        
        if(ans.size() == 0){
            ans.add(-1);
        }
        
        return ans;
    }
}
