class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        return helper(0, 0, m, n, obstacleGrid, dp);
    }

    //function for finding the unique path
    private int helper(int i, int j, int m, int n, int[][] grid, int[][] dp){
        //base case
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 1){
            return 0;
        }

        //case 2
        if(i == m - 1 && j == n - 1){
            dp[i][j] = 1;
            return dp[i][j];
        }

        //case 3
        if(dp[i][j] != 0){
            return dp[i][j];
        }

        int move_right = helper(i, j + 1, m, n, grid, dp);
        int move_down = helper(i + 1, j, m, n, grid, dp);

        dp[i][j] = move_right + move_down;
        return dp[i][j];
    }
}
