class Pair {
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    //function for detecting cycle in given undirected graph
    private boolean checkForCycle(int src, int V, List<List<Integer>> adj, boolean[] visited){
        //visit
        visited[src] = true;
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(src, -1));
        
        while(!queue.isEmpty()){
            int node = queue.peek().first;
            int parent = queue.peek().second;
            queue.remove();
            
            for(int adjacentNode : adj.get(node)){
                if(visited[adjacentNode] == false){
                    //visit
                    visited[adjacentNode] = true;
                    queue.add(new Pair(adjacentNode, node));
                }
                else if(parent != adjacentNode){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        // Build adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u); // Because the graph is undirected
        }
        
        boolean[] visited = new boolean[V];
        for(int i = 0; i < V; i++){
            visited[i] = false;
        }
        
        for(int i = 0; i < V; i++){
            if(visited[i] == false){
                if(checkForCycle(i, V, adj, visited)){
                    return true;
                }
            }
        }
        
        return false;
    }
}
