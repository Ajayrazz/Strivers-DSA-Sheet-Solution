class Tuple {
    int distance;
    int row;
    int col;
    public Tuple(int distance, int row, int col){
        this.distance = distance;
        this.row = row;
        this.col = col;
    }
}

class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        //base case
        if(grid == null || (grid.length == 0 && grid[0].length == 0)){
            return -1;
        }

        int n = grid.length;
        int m = grid[0].length;
        if(grid[0][0] != 0 || grid[n - 1][m - 1] != 0){
            return -1;
        }

        int[] dx = {-1, -1, -1, 0, 1, 1, 1, 0};
        int[] dy = {-1, 0, 1, 1, 1, 0, -1, -1};

        Queue<Tuple> queue = new LinkedList<>();
        queue.add(new Tuple(1, 0, 0));

        int[][] dist = new int[n][m];
        //fill dist with positive infinity
        for(int[] row : dist){
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dist[0][0] = 1;

        while(!queue.isEmpty()){
            int distance = queue.peek().distance;
            int row = queue.peek().row;
            int col = queue.peek().col;
            queue.poll();

            if(row == n -1 && col == m - 1){
                return distance;
            }

            for(int index = 0; index < 8; index++){
                int nRow = row + dx[index];
                int nCol = col + dy[index];

                if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && grid[nRow][nCol] == 0 && distance + 1 < dist[nRow][nCol]){
                    dist[nRow][nCol] = 1 + distance;
                    queue.add(new Tuple(dist[nRow][nCol], nRow, nCol));
                }
            }
        }

        return -1;
    }
}
