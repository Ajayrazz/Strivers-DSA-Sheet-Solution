/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //Helper Function Create Inorder Map
    public int[] inorderHelper(int[] preorder){
        int[] inorder = new int[preorder.length];

        for(int i = 0; i < preorder.length; i++){
            inorder[i] = preorder[i];
        }

        Arrays.sort(inorder);
        return inorder;
    }
    public Map<Integer, Integer> inorderMap = new HashMap<>();
    public int preorderIndex = 0;
    public TreeNode bstFromPreorder(int[] preorder) {
        int[] inorder = inorderHelper(preorder);

        for(int i = 0; i < preorder.length; i++){
            inorderMap.put(inorder[i], i);
        }

        return Helper(preorder, 0, inorder.length - 1);
    };

    //Helper Function To Create Binary Search Tree
    public TreeNode Helper(int[] preorder, int left, int right){
        //Base Case
        if(left > right){
            return null;
        }

        int rootVal = preorder[preorderIndex++];
        TreeNode root = new TreeNode(rootVal);
        int inorderIndex = inorderMap.get(root.val);

        root.left = Helper(preorder, left, inorderIndex - 1);
        root.right = Helper(preorder, inorderIndex + 1, right);

        return root;
    }
}
