// User function Template for Java

class Solution {
    
    private void dfs(int node, int[] visited, ArrayList<ArrayList<Integer>> adj, Stack<Integer> st){
        visited[node] = 1;
        for(Integer it : adj.get(node)){
            if(visited[it] == 0){
                dfs(it, visited, adj, st);
            }
        }
        st.push(node);
    }
    
    private void dfs3(int node, int[] visited, ArrayList<ArrayList<Integer>> adjT){
        visited[node] = 1;
        for(Integer it : adjT.get(node)){
            if(visited[it] == 0){
                dfs3(it, visited, adjT);
            }
        }
    }
    
    // Function to find number of strongly connected components in the graph.
    public int kosaraju(ArrayList<ArrayList<Integer>> adj) {
        // code here
        int V = adj.size();
        int[] visited = new int[V];
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < V; i++){
            if(visited[i] == 0){
                dfs(i, visited, adj, stack);
            }
        }
        
        ArrayList<ArrayList<Integer>> adjT = new ArrayList<ArrayList<Integer>>();
        for(int i = 0; i < V; i++){
            adjT.add(new ArrayList<Integer>());
        }
        
        for(int i = 0; i < V; i++){
            visited[i] = 0;
            for(Integer it : adj.get(i)){
                adjT.get(it).add(i);
            }
        }
        
        int scc = 0;
        while(!stack.isEmpty()){
            int node = stack.peek();
            stack.pop();
            if(visited[node] == 0){
                scc++;
                dfs3(node, visited, adjT);
            }
        }
        
        return scc;
    }
}
