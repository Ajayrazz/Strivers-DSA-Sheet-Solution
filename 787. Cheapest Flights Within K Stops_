class Pair {
    String first;
    int second;
    public Pair(String first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> set = new HashSet<>(wordList);
        //edge case
        if(!set.contains(endWord)){
            return 0;
        }

        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(beginWord, 1));

        while(!queue.isEmpty()){
            String word = queue.peek().first;
            int steps = queue.peek().second;
            queue.poll();

            if(word.equals(endWord)){
                return steps;
            }

            for(int i = 0; i < word.length(); i++){
                for(char ch = 'a'; ch <= 'z'; ch++){
                    char[] replacedCharArray = word.toCharArray();
                    replacedCharArray[i] = ch;
                    String replacedString = new String(replacedCharArray);

                    if(set.contains(replacedString)){
                        set.remove(replacedString);
                        queue.add(new Pair(replacedString, steps + 1));
                    }
                }
            }
        }

        return 0;
    }
}
