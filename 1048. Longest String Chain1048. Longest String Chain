class Solution {
    public int longestStrChain(String[] words) {
        int n = words.length;
        Arrays.sort(words, Comparator.comparingInt(String::length));

        Map<String, Integer> wordIndex = new HashMap<>();
        for (int i = 0; i < n; i++) {
            wordIndex.put(words[i], i);
        }

        int[][] dp = new int[n][n + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return longestChainUtil(0, -1, words, wordIndex, dp);
    }

    public int longestChainUtil(int index, int prev_index, String[] words, Map<String, Integer> wordIndex, int[][] dp) {
        if (index == words.length) return 0;
        if (dp[index][prev_index + 1] != -1) return dp[index][prev_index + 1];

        int notTake = longestChainUtil(index + 1, prev_index, words, wordIndex, dp);
        int take = 0;

        if (prev_index == -1 || isPredecessor(words[prev_index], words[index])) {
            take = 1 + longestChainUtil(index + 1, index, words, wordIndex, dp);
        }

        return dp[index][prev_index + 1] = Math.max(take, notTake);
    }

    private boolean isPredecessor(String prev, String curr) {
        if (curr.length() != prev.length() + 1) return false;

        int i = 0, j = 0;
        boolean skipped = false;

        while (i < prev.length() && j < curr.length()) {
            if (prev.charAt(i) == curr.charAt(j)) {
                i++; j++;
            } else if (!skipped) {
                skipped = true;
                j++;
            } else {
                return false;
            }
        }

        return true;
    }
}
