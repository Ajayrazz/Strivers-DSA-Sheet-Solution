class Pair {
    String first;
    int second;
    public Pair(String first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        int n = wordList.size();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(beginWord, 1));
        Set<String> set = new HashSet<>();

        for(int i = 0; i < n; i++){
            set.add(wordList.get(i));
        }

        while(!queue.isEmpty()){
            String word = queue.peek().first;
            int step = queue.peek().second;
            queue.remove();

            if(word.equals(endWord) == true){
                return step;
            }

            for(int i = 0; i < word.length(); i++){
                for(char ch = 'a'; ch <= 'z'; ch++){
                    char[] replaceArray = word.toCharArray();
                    replaceArray[i] = ch;
                    String replace = new String(replaceArray);

                    if(set.contains(replace) == true){
                        set.remove(replace);
                        queue.add(new Pair(replace, step + 1));
                    }
                }
            }
        }
        return 0;
    }
}
