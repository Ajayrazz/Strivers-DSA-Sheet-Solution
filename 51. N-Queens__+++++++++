class Solution {
    public List<List<String>> solveNQueens(int n) {
        //create a 2d board array
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }

        List<List<String>> result = new ArrayList<>();
        int[] leftRow = new int[n];
        int[] lowerDiagonal = new int[2 * n - 1];
        int[] upperDiagonal = new int[2 * n - 1];
        //call the helper function
        Helper(0, result, board, leftRow, lowerDiagonal, upperDiagonal);
        //return
        return result;
    }

    //Helper function to create a nQueen
    public void Helper(int col, List<List<String>> result, char[][] board, int[] leftRow, int[] lowerDiagonal, int[] upperDiagonal){
        //base case
        if(col == board.length){
            result.add(construct(board));
            return;
        }

        for(int row = 0; row < board.length; row++){
            if(leftRow[row] == 0 && lowerDiagonal[row + col] == 0 && upperDiagonal[board.length - 1 + col - row] == 0){
                //make the changes
                board[row][col] = 'Q';
                leftRow[row] = 1;
                lowerDiagonal[row + col] = 1;
                upperDiagonal[board.length - 1 + col - row] = 1;
                //call the function
                Helper(col + 1, result, board, leftRow, lowerDiagonal, upperDiagonal);
                //revert the changes
                board[row][col] = '.';
                leftRow[row] = 0;
                lowerDiagonal[row + col] = 0;
                upperDiagonal[board.length - 1 + col - row] = 0;
            }
        }
    }

    //construct function
    public List<String> construct(char[][] board){
        List<String> result = new ArrayList<>();
        for(int i = 0; i < board.length; i++){
            String temp = new String(board[i]);
            result.add(temp);
        }
        return result;
    }
}
