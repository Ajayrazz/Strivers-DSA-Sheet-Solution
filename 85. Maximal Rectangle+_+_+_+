class Solution {
    public int maximalRectangle(char[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int maxArea = 0;
        int[] heights = new int[m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(matrix[i][j] == '1'){
                    heights[j]++;
                }
                else {
                    heights[j] = 0;
                }
            }

            maxArea = Math.max(maxArea, Histogram(heights));
        }

        return maxArea;
    }

    public int Histogram(int[] heights){
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        for(int i = 0; i <= heights.length; i++){
            while(!stack.isEmpty() && ((i == heights.length) || (heights[stack.peek()] > heights[i]))){
                int prev = heights[stack.pop()];
                int width;
                if(stack.isEmpty()){
                    width = i;
                }
                else {
                    width = i - stack.peek() - 1;
                }

                int area = prev * width;
                maxArea = Math.max(maxArea, area);
            }

            stack.push(i);
        }

        return maxArea;
    }
}
