import java.util.*;

public class Solution {
    static int MOD = 1000000007;

    public static int findWays(int[] num, int tar) {
        int n = num.length;
        int[][] dp = new int[n][tar + 1];
        for (int[] row : dp) Arrays.fill(row, -1);
        return findWaysUtil(n - 1, tar, num, dp);
    }

    public static int findWaysUtil(int index, int target, int[] nums, int[][] dp) {
        if (index == 0) {
            if (target == 0) return (nums[0] == 0) ? 2 : 1;
            return (nums[0] == target) ? 1 : 0;
        }

        if (dp[index][target] != -1) return dp[index][target];

        int notTake = findWaysUtil(index - 1, target, nums, dp);
        int take = 0;
        if (nums[index] <= target) {
            take = findWaysUtil(index - 1, target - nums[index], nums, dp);
        }

        return dp[index][target] = (notTake + take) % MOD;
    }
}
