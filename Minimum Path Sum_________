class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        int[][] dp = new int[n][m];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        return minPathUtil(n - 1, m - 1, grid, dp);
    }

    //minPathUtil function
    public int minPathUtil(int i, int j, int[][] grid, int[][] dp){
        //case 1
        if(i == 0 && j == 0) return grid[i][j];
        //case 2
        if(i < 0 || j < 0) return (int) Math.pow(10, 9);
        //case 3
        if(dp[i][j] != -1) return dp[i][j];

        int move_up = grid[i][j] + minPathUtil(i - 1, j, grid, dp);
        int move_left = grid[i][j] + minPathUtil(i, j - 1, grid, dp);

        //update dp
        return dp[i][j] = Math.min(move_up, move_left);
    }
}
