class Solution {
    public int orangesRotting(int[][] grid) {
        //base case
        if(grid == null || (grid.length == 0 && grid[0].length == 0)) return 0;
        Queue<int[]> queue = new LinkedList<>();
        int fresh_count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 2){
                    queue.add(new int[]{i, j});
                }

                if(grid[i][j] != 0){
                    fresh_count += 1;
                }
            }
        }

        if(fresh_count == 0) return 0;
        int[] dx = {1, 0, 0, -1};
        int[] dy = {0, -1, 1, 0};
        int count = 0, min_count = 0;

        while(!queue.isEmpty()){
            int size = queue.size();
            count += size;
            for(int i = 0; i < size; i++){
                int[] point = queue.poll();
                for(int index = 0; index < 4; index++){
                    int nRow = point[0] + dx[index];
                    int nCol = point[1] + dy[index];

                    if(nRow < 0 || nCol < 0 || nRow >= grid.length || nCol >= grid[0].length || grid[nRow][nCol] == 2 || grid[nRow][nCol] == 0){
                        continue;
                    }

                    grid[nRow][nCol] = 2;
                    queue.add(new int[]{nRow, nCol});
                }
            }

            if(queue.size() != 0){
                min_count++;
            }
        }

        return count == fresh_count ? min_count : -1;
    }
}
