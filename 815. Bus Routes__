class Pair {
    int first;
    int second;
    public Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) return 0;

        int n = routes.length;
        // Build a map from bus stop to list of buses (indices) passing through it
        Map<Integer, List<Integer>> stopToBuses = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int stop : routes[i]) {
                stopToBuses.computeIfAbsent(stop, k -> new ArrayList<>()).add(i);
            }
        }

        // BFS initialization
        Queue<Pair> queue = new LinkedList<>();
        boolean[] visitedBuses = new boolean[n];
        Set<Integer> visitedStops = new HashSet<>();
        queue.add(new Pair(source, 0));  // Pair<currentStop, busesTaken>
        visitedStops.add(source);

        while (!queue.isEmpty()) {
            Pair curr = queue.poll();
            int stop = curr.first;
            int busesTaken = curr.second;

            // For all buses passing through current stop
            if (!stopToBuses.containsKey(stop)) continue;
            for (int bus : stopToBuses.get(stop)) {
                if (visitedBuses[bus]) continue;
                visitedBuses[bus] = true;

                // Traverse all stops in this bus route
                for (int nextStop : routes[bus]) {
                    if (nextStop == target) return busesTaken + 1;
                    if (!visitedStops.contains(nextStop)) {
                        visitedStops.add(nextStop);
                        queue.add(new Pair(nextStop, busesTaken + 1));
                    }
                }
            }
        }

        return -1;  // Target not reachable
    }
}
