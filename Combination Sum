class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Helper(candidates, target, 0, new ArrayList<>(), 0, result);
        return result;
    }

    public void Helper(int[] candidates, int target, int index, List<Integer> combination, int total, List<List<Integer>> result){
        //base case
        if(total == target){
            result.add(new ArrayList<>(combination));
            return;
        }

        if(index >= candidates.length || total > target){
            return;
        }

        //add element tot combination
        combination.add(candidates[index]);
        //increase total
        Helper(candidates, target, index, combination, total + candidates[index], result);
        //remove the last element from combination
        combination.remove(combination.size() - 1);
        //increase index
        Helper(candidates, target, index + 1, combination, total, result);
    }
}
