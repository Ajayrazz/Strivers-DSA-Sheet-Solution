
class Solution {
    public ArrayList<ArrayList<Integer>> getComponents(int V, int[][] edges) {
        // code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);  // undirected
        }
        
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        boolean[] visited = new boolean[V];
        for(int i = 0; i < V; i++){
            if(!visited[i]){
                ArrayList<Integer> current = new ArrayList<>();
                dfs(i, adj, current, visited);
                result.add(current);
            }
        }
        
        return result;
    }
    
    //dfs function
    public void dfs(int node, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> current, boolean[] visited){
        //visit
        visited[node] = true;
        current.add(node);
        
        for(int adjNode : adj.get(node)){
            if(!visited[adjNode]){
                dfs(adjNode, adj, current, visited);
            }
        }
    }
}
