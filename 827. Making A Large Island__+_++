class DisjointSet {
    public List<Integer> parent = new ArrayList<>();
    public List<Integer> size = new ArrayList<>();
    public List<Integer> rank = new ArrayList<>();

    public DisjointSet(int n){
        for(int i = 0; i < n; i++){
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    //find_ulp function
    public int find_ulp(int node){
        if(node == parent.get(node)){
            return node;
        }

        int ulp = find_ulp(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    //unionByRank function
    public void unionByRank(int u, int v){
        int ulp_u = find_ulp(u);
        int ulp_v = find_ulp(v);
        if(ulp_u == ulp_v){
            return;
        }

        if(rank.get(ulp_u) < rank.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
        }
        else if(rank.get(ulp_v) < rank.get(ulp_u)){
            parent.set(ulp_v, ulp_u); 
        }
        else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    //unionBySize function
    public void unionBySize(int u, int v){
        int ulp_u = find_ulp(u);
        int ulp_v = find_ulp(v);
        if(ulp_u == ulp_v){
            return;
        }

        if(size.get(ulp_u) < size.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        }
        else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}

class Solution {
    public int largestIsland(int[][] grid) {
        int n = grid.length;
        DisjointSet ds = new DisjointSet(n * n);
        int[] dx = {1, 0, 0, -1};
        int[] dy = {0, -1, 1, 0};
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 0){
                    continue;
                }

                for(int index = 0; index < 4; index++){
                    int nRow = i + dx[index];
                    int nCol = j + dy[index];

                    if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < n && grid[nRow][nCol] == 1){
                        int nodeN = i * n + j;
                        int adjNodeN = nRow * n + nCol;
                        ds.unionBySize(nodeN, adjNodeN);
                    }
                }
            }
        }

        int max = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    continue;
                }

                Set<Integer> components = new HashSet<>();
                for(int index = 0; index < 4; index++){
                    int nRow = i + dx[index];
                    int nCol = j + dy[index];

                    if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < n && grid[nRow][nCol] == 1){
                        components.add(ds.find_ulp(nRow * n + nCol));
                    }
                }

                int total_size = 0;
                for(Integer parent : components){
                    total_size += ds.size.get(parent);
                }

                //update max
                max = Math.max(max, total_size + 1);
            }
        }

        // if all cells are 1 or no components can be connected with one 1 then step 2 wont run hence we do this step.
        for(int cellN = 0; cellN < n * n; cellN++){
            max = Math.max(max, ds.size.get(ds.find_ulp(cellN)));
        }

        return max;
    }
}
