/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        //base case
        if(root == null) return new ArrayList<>();
        List<Integer> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        Map<Integer, TreeNode> map = new HashMap<>();
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();

                if(node.left != null){
                    map.put(node.left.val, node);
                    queue.add(node.left);
                }

                if(node.right != null){
                    map.put(node.right.val, node);
                    queue.add(node.right);
                }
            }
        }

        queue.add(target);
        Map<Integer, Integer> visited = new HashMap<>();
        while(!queue.isEmpty() && k-- > 0){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                //add node to visited
                visited.put(node.val, 1);

                //Add children
                if(node.left != null && !visited.containsKey(node.left.val)){
                    queue.add(node.left);
                }

                if(node.right != null && !visited.containsKey(node.right.val)){
                    queue.add(node.right);
                }

                if(map.containsKey(node.val) && !visited.containsKey(map.get(node.val).val)){
                    queue.add(map.get(node.val));
                }
            }
        }

        while(!queue.isEmpty()){
            result.add(queue.peek().val);
            queue.poll();
        }

        return result;
    }
}
