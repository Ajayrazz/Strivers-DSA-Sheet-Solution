import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int[][] dp = new int[n][k + 1];
        //fill the dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return subsetSumUtil(n - 1, k, arr, dp);
    }

    //function for subsetsum util
    public static boolean subsetSumUtil(int idx, int target, int[] arr, int[][] dp){
        //case 1
        if(target == 0){
            return true;
        }

        //case 2
        if(idx == 0){
            return arr[idx] == target;
        }

        //case 3
        if(dp[idx][target] != -1){
            return dp[idx][target] == 0 ? false : true;
        }

        boolean notTaken = subsetSumUtil(idx - 1, target, arr, dp);
        boolean taken = false;

        if(arr[idx] <= target){
            taken = subsetSumUtil(idx - 1, target - arr[idx], arr, dp);
        }

        //update the dp
        dp[idx][target] = taken || notTaken ? 1 : 0;

        return taken || notTaken;
    }
}
