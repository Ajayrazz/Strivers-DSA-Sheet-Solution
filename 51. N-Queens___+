class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }

        List<List<String>> result = new ArrayList<>();
        int[] leftRow = new int[n];
        int[] lowerDiagonal = new int[2 * n - 1];
        int[] upperDiagonal = new int[2 * n - 1];

        helper(0, n, result, board, leftRow, lowerDiagonal, upperDiagonal);
        return result;
    }

    //function for making nQueen
    private void helper(int col, int n, List<List<String>> result, char[][] board, int[] leftRow, int[] lowerDiagonal, int[] upperDiagonal){
        //base case
        if(col == n - 1){
            result.add(construct(board));
            return;
        }

        for(int col = 0; col < n; col++){
            if(leftRow[row] == 0 && lowerDiagonal[row + col] == 0 && upperDiagonal[n - 1 + col - row] == 0){
                //make the changes
                board[row][col] = 'Q';
                leftRow[row] = 1;
                lowerDiagonal[row + col] = 1;
                upperDiagonal[n - 1 + col - row] = 1;
                //recall the function
                helper(col + 1, n, result, board, leftRow, lowerDiagonal, upperDiagonal);
                //revert the changes
                board[row][col] = '.';
                leftRow[row] = 0;
                lowerDiagonal[row + col] = 0;
                upperDiagonal[n - 1 + col - row] = 0;
            }
        }
    }

    //construct function
    private List<String>  construct(char[][] board){
        List<String> ans = new ArrayList<>();
        for(int i = 0; i < board.length; i++){
            String str = new String(board[i]);
            ans.add(str);
        }
        return ans;
    }
}
