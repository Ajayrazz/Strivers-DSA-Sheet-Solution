class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][n + 1];
        //fill dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return Helper(0, -1, nums, dp);
    }

    //Helper function
    public int Helper(int index, int prev_index, int[] nums, int[][] dp){
        //case 1
        if(index == nums.length) return 0;
        //case 2
        if(dp[index][prev_index + 1] != -1){
            return dp[index][prev_index + 1];
        }

        int notTake = Helper(index + 1, prev_index, nums, dp);
        int take = 0;
        if(prev_index == -1 || nums[index] > nums[prev_index]){
            take = 1 + Helper(index + 1, index, nums, dp);
        }

        return dp[index][prev_index + 1] = Math.max(take, notTake);
    }
}
