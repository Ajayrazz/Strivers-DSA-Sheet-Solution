class Pair {
    String word;
    int steps;
    public Pair(String word, int steps) {
        this.word = word;
        this.steps = steps;
    }
}

class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);
        List<List<String>> res = new ArrayList<>();
        if (!dict.contains(endWord)) return res;

        // BFS setup
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(beginWord, 1));
        Map<String, List<String>> parents = new HashMap<>();
        Map<String, Integer> distance = new HashMap<>();
        distance.put(beginWord, 1);

        int shortest = Integer.MAX_VALUE;

        while (!queue.isEmpty()) {
            Pair curr = queue.poll();
            String word = curr.word;
            int step = curr.steps;

            if (step > shortest) break; // prune deeper levels

            for (int i = 0; i < word.length(); i++) {
                char[] arr = word.toCharArray();
                for (char c = 'a'; c <= 'z'; c++) {
                    arr[i] = c;
                    String next = new String(arr);

                    if (!dict.contains(next)) continue;

                    // first time visiting this word
                    if (!distance.containsKey(next)) {
                        distance.put(next, step + 1);
                        queue.add(new Pair(next, step + 1));
                    }

                    // only add parent if it's part of shortest path
                    if (distance.get(next) == step + 1) {
                        parents.computeIfAbsent(next, k -> new ArrayList<>()).add(word);
                    }

                    if (next.equals(endWord)) {
                        shortest = step + 1;
                    }
                }
            }
        }

        if (!parents.containsKey(endWord)) return res;

        // backtrack
        List<String> path = new ArrayList<>();
        path.add(endWord);
        backtrack(endWord, beginWord, parents, res, path);

        return res;
    }

    private void backtrack(String word, String beginWord,
                           Map<String, List<String>> parents,
                           List<List<String>> res, List<String> path) {
        if (word.equals(beginWord)) {
            List<String> temp = new ArrayList<>(path);
            Collections.reverse(temp);
            res.add(temp);
            return;
        }

        if (!parents.containsKey(word)) return;

        for (String p : parents.get(word)) {
            path.add(p);
            backtrack(p, beginWord, parents, res, path);
            path.remove(path.size() - 1);
        }
    }
}
