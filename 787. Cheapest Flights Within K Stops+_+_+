class Pair {
    int first;  //end node
    int second; //weight
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Tuple {
    int first;  //steps
    int second; //node
    int third;  //cost
    public Tuple(int first, int second, int third){
        this.first = first;
        this.second = second;
        this.third = third;
    }
}

class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }

        int m = flights.length;
        for(int i = 0; i < m; i++){
            adj.get(flights[i][0]).add(new Pair(flights[i][1], flights[i][2])); // directed graph
        }

        int[] dist = new int[n];
        //fill the dist with positive infinity
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        Queue<Tuple> queue = new LinkedList<>();
        queue.add(new Tuple(0, src, 0));    //{steps, node, distance}

        while(!queue.isEmpty()){
            int steps = queue.peek().first;
            int node = queue.peek().second;
            int cost = queue.peek().third;
            queue.remove();

            //case of invalid
            if(steps > k){
                continue;
            }

            //iterate its neighbor
            for(Pair iter : adj.get(node)){
                int adjNode = iter.first;
                int edW = iter.second;

                if(edW + cost < dist[adjNode] && steps <= k){
                    //update dist and add it to queue
                    dist[adjNode] = cost + edW;
                    queue.add(new Tuple(steps + 1, adjNode, dist[adjNode]));
                }
            }
        }

        if(dist[dst] == Integer.MAX_VALUE) return -1;
        return dist[dst];
    }
}
