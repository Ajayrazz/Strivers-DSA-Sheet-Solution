class Solution {
    public boolean exist(char[][] board, String word) {
        int row = board.length;
        int col = board[0].length;

        boolean[][] visited = new boolean[row][col];
        boolean result = false;

        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(board[i][j] == word.charAt(0)){
                    //update the result
                    result = Helper(0, i, j, board, word, visited);

                    if(result){
                        return true;
                    }
                }
            }
        }

        return false;
    }

    //Helper Function To Find The Word In The Given Board
    public boolean Helper(int idx, int row, int col, char[][] board, String word, boolean[][] visited){
        //base case
        if(idx >= word.length()){
            return true;
        }
        
        //check the invalid case
        if(row < 0 || col < 0 || row >= board.length || col >= board[0].length || board[row][col] != word.charAt(idx) || visited[row][col]){
            return false;
        }

        //make the changes by visiting
        visited[row][col] = true;

        //recall the function
        if(Helper(idx + 1, row + 1, col, board, word, visited) ||
           Helper(idx + 1, row - 1, col, board, word, visited) ||
           Helper(idx + 1, row, col + 1, board, word, visited) ||
           Helper(idx + 1, row, col - 1, board, word, visited)){
            return true;
        }

        //revert the changes
        visited[row][col] = false;
        return false;
    }
}
