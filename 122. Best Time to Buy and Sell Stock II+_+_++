class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        //fill the dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return Helper(0, 0, prices, dp);
    }

    public int Helper(int index, int buy, int[] prices, int[][] dp){
        if(index == prices.length) return 0;
        if(dp[index][buy] != -1) return dp[index][buy];

        int profit = 0;
        if(buy == 0){
            int operation1 = Helper(index + 1, 0, prices, dp);
            int operation2 = -prices[index] + Helper(index + 1, 1, prices, dp);
            //update the profit
            profit = Math.max(operation1, operation2);
        }
        else {
            int operation1 = Helper(index + 1, 1, prices, dp);
            int operation2 = prices[index] + Helper(index + 1, 0, prices, dp);
            //update the profit
            profit = Math.max(operation1, operation2);
        }

        return dp[index][buy] = profit;
    }
}
