class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;

        int[][] dp = new int[n][m];
        return uniquePathUtil(0, 0, n, m, obstacleGrid, dp);
    }

    //Function To Find The Number Of Unique Path That The Robot Can Take To Reach The Bottom-Right Corner
    public int uniquePathUtil(int i, int j, int n, int m, int[][] obstacleGrid, int[][] dp){
        //base case
        if(i < 0 || j < 0 || i >= n || j >= m || obstacleGrid[i][j] == 1){
            return 0;
        }

        if(i == n - 1 && j == m - 1){
            dp[i][j] = 1;
            return dp[i][j];
        }

        if(dp[i][j] != 0){
            return dp[i][j];
        }

        int right = uniquePathUtil(i, j + 1, n, m, obstacleGrid, dp);
        int down = uniquePathUtil(i + 1, j, n, m, obstacleGrid, dp);

        //update the dp
        dp[i][j] = right + down;
        return dp[i][j];
    }
}
