class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        //Sort The Array
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        backtrack(candidates, target, result, current, 0);
        return result;
    }

    public void backtrack(int[] candidates, int target, List<List<Integer>> result, List<Integer> current, int index){
        //Base Case
        if(target == 0){
            result.add(new ArrayList<>(current));
            return;
        }
        else if(target < 0){
            return;
        }
        else {
            for(int i = index; i < candidates.length; i++){
                //Base Case
                if(i > index && candidates[i] == candidates[i - 1]){
                    continue;
                }
                current.add(candidates[i]);
                backtrack(candidates, target - candidates[i], result, current, i + 1);
                current.remove(current.get(current.size() - 1));
            }
        }
    }
}
