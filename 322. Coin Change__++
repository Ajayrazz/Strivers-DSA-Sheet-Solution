class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        int ans = coinChangeUtil(n - 1, amount, coins, dp);
        if(ans >= (int) Math.pow(10, 9)){
            return -1;
        }

        return ans;
    }

    //Function For coinChangeUtil
    public int coinChangeUtil(int idx, int target, int[] arr, int[][] dp){
        if(idx == 0){
            if(target % arr[0] == 0){
                return target / arr[0];
            }
            else {
                return (int) Math.pow(10, 9);
            }
        }

        if(dp[idx][target] != -1){
            return dp[idx][target];
        }

        int notTaken = 0 + coinChangeUtil(idx - 1, target, arr, dp);
        int taken = (int) Math.pow(10, 9);

        if(arr[idx] <= target){
            taken = 1 + coinChangeUtil(idx, target - arr[idx], arr, dp);
        }

        return dp[idx][target] = Math.min(taken, notTaken);
    }
}
