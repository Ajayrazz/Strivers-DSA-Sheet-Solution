class Pair {
    int first;
    int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {
    public int spanningTree(int V, int[][] edges) {
        // code here
        List<List<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            
            adj.get(u).add(new Pair(v, wt));
            adj.get(v).add(new Pair(u, wt));
        }
        
        //Priority Queue , sort pq based on distance in asc order
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.second - b.second);
        pq.add(new Pair(0, 0)); // node , distance
        
        boolean[] visited = new boolean[V];
        int mst_sum = 0;
        
        while(!pq.isEmpty()){
            int node = pq.peek().first;
            int distance = pq.peek().second;
            pq.poll();
            
            if(visited[node]){
                continue;
            }
            
            visited[node] = true;
            mst_sum += distance;
            
            for(Pair current : adj.get(node)){
                int adjNode = current.first;
                int wt = current.second;
                
                if(!visited[adjNode]){
                    pq.add(new Pair(adjNode, wt));
                }
            }
        }
        
        return mst_sum;
    }
}
