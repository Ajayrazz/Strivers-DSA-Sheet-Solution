/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/

class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        if(node == null) return new ArrayList<>();
        ArrayList<Integer> result = new ArrayList<>();
        
        if(!isLeaf(node)){
            result.add(node.data);
        }
        
        addLeftBoundary(node, result);
        addLeaves(node, result);
        addRightBoundary(node, result);
        
        return result;
    }
    
    //isLeaf function
    public boolean isLeaf(Node node){
        return node.left == null && node.right == null;
    }
    
    //addLeftBoundary function
    public void addLeftBoundary(Node node, ArrayList<Integer> result){
        Node current = node.left;
        while(current != null){
            if(!isLeaf(current)){
                result.add(current.data);
            }
            
            if(current.left != null){
                current = current.left;
            }
            else {
                current = current.right;
            }
        }
    }
    
    //addRightBoundary function
    public void addRightBoundary(Node node, ArrayList<Integer> result){
        Node current = node.right;
        ArrayList<Integer> temp = new ArrayList<>();
        while(current != null){
            if(!isLeaf(current)){
                temp.add(current.data);
            }
            
            if(current.right != null){
                current = current.right;
            }
            else {
                current = current.left;
            }
        }
        
        for(int i = temp.size() - 1; i >= 0; i--){
            result.add(temp.get(i));
        }
    }
    
    //addLeaves function
    public void addLeaves(Node node, ArrayList<Integer> result){
        if(isLeaf(node)){
            result.add(node.data);
        }
        
        if(node.left != null){
            addLeaves(node.left, result);
        }
        
        if(node.right != null){
            addLeaves(node.right, result);
        }
    }
}
