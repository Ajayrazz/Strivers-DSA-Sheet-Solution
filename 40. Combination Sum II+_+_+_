class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        //sort candidates
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        Helper(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }

    public void Helper(int[] candidates, int target, int index, List<Integer> combination, List<List<Integer>> result){
        //base case
        if(target == 0){
            result.add(new ArrayList<>(combination));
            return;
        }
        else if(target < 0){
            return;
        }
        else {
            for(int i = index; i < candidates.length; i++){
                if(i > index && candidates[i] == candidates[i - 1]){
                    continue;
                }

                combination.add(candidates[i]);
                Helper(candidates, target - candidates[i], i + 1, combination, result);
                combination.remove(combination.get(combination.size() - 1));
            }
        }
    }
}
