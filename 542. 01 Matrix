class Pair{
    int first;
    int second;
    Pair( int _first, int _second){
        this.first= _first;
        this.second=_second;
    }
}
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n= mat.length;
        int m= mat[0].length;
        int dist[][]= new int[n][m];
        Queue<Pair> q = new LinkedList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if (mat[i][j]==0){
                    dist[i][j]=0;
                    q.add(new Pair(i,j));
                }
                else{
                    dist[i][j]=-1;
                }
            }
        }
        int delrow[]={-1, 0, 1, 0};
        int delcol[]={0, 1, 0, -1};
        
        while(!q.isEmpty()){
            int row= q.peek().first;
            int col= q.peek().second;
            q.remove();
            for(int i=0;i<4;i++){
                int nrow= row + delrow[i];
                int ncol= col + delcol[i];
                if(nrow>=0 &&nrow<n && ncol>=0 && ncol<m && dist[nrow][ncol]==-1){
                    dist[nrow][ncol]= dist[row][col] +1;
                    q.add(new Pair(nrow,ncol));
                }
            }
        }
    return dist;

        
    }
}
