// User function Template for Java
class Pair {
    int first;
    int second;
    
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
}

class Solution {

    public int[] shortestPath(int V, int E, int[][] edges) {
        List<List<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++){
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            
            adj.get(u).add(new Pair(v, wt));
        }
        
        boolean[] visited = new boolean[V];
        Stack<Integer> stack = new Stack<>();
        //apply topo sort
        for(int i = 0; i < V; i++){
            if(!visited[i]){
                dfs(i, adj, visited, stack);
            }
        }
        
        int[] dist = new int[V];
        //fill dist with positive infinity
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;
        
        while(!stack.isEmpty()){
            int node = stack.pop();
            for(int i = 0; i < adj.get(node).size(); i++){
                int adjNode = adj.get(node).get(i).first;
                int wt = adj.get(node).get(i).second;
                
                if(dist[node] != Integer.MAX_VALUE && dist[node] + wt < dist[adjNode]){
                    dist[adjNode] = dist[node] + wt;
                }
            }
        }
        
        for(int i = 0; i < V; i++){
            if(dist[i] == Integer.MAX_VALUE){
                dist[i] = -1;
            }
        }
        
        return dist;
    }
    
    //topo sort
    public void dfs(int node, List<List<Pair>> adj, boolean[] visited, Stack<Integer> stack){
        //visit
        visited[node] = true;
        for(Pair current : adj.get(node)){
            if(!visited[current.first]){
                dfs(current.first, adj, visited, stack);
            }
        }
        
        stack.push(node);
    }
}
