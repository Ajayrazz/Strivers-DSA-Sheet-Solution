import java.util.*;

class Pair implements Comparable<Pair> {
    int node;
    int weight;

    public Pair(int node, int weight) {
        this.node = node;
        this.weight = weight;
    }

    // Sort by weight (distance)
    public int compareTo(Pair other) {
        if (this.weight == other.weight)
            return this.node - other.node;
        return this.weight - other.weight;
    }
}

class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        // Step 1: Build the adjacency list
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];

            adj.get(u).add(new Pair(v, w));
            adj.get(v).add(new Pair(u, w)); // undirected graph
        }

        // Step 2: Initialize distances
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        // Step 3: Set to get the node with minimum distance
        TreeSet<Pair> set = new TreeSet<>();
        set.add(new Pair(src, 0));

        while (!set.isEmpty()) {
            Pair current = set.pollFirst(); // extract min
            int u = current.node;
            int d = current.weight;

            // Explore neighbors
            for (Pair neighbor : adj.get(u)) {
                int v = neighbor.node;
                int w = neighbor.weight;

                if (dist[u] + w < dist[v]) {
                    // If v is already in set with a worse distance, remove it
                    if (dist[v] != Integer.MAX_VALUE) {
                        set.remove(new Pair(v, dist[v]));
                    }

                    // Update with new distance
                    dist[v] = dist[u] + w;
                    set.add(new Pair(v, dist[v]));
                }
            }
        }

        return dist;
    }
}
