class Solution {
    public void solve(char[][] board) {
        int n = board.length;
        int m = board[0].length;
        boolean[][] visited = new boolean[n][m];
        int[] dx = {1, 0, 0, -1};
        int[] dy = {0, -1, 1, 0};

        //Iterate the first and last row
        for(int j = 0; j < m; j++){
            //first row
            if(board[0][j] == 'O' && !visited[0][j]){
                //call dfs
                dfs(0, j, n, m, board, visited, dx, dy);
            }

            //last row
            if(board[n - 1][j] == 'O' && !visited[n - 1][j]){
                //call dfs
                dfs(n - 1, j, n, m, board, visited, dx, dy);
            }
        }

        //Iterate the first and last column
        for(int i = 0; i < n; i++){
            //first column
            if(board[i][0] == 'O' && !visited[i][0]){
                //call dfs
                dfs(i, 0, n, m, board, visited, dx, dy);
            }

            //last column
            if(board[i][m - 1] == 'O' && !visited[i][m - 1]){
                //call dfs
                dfs(i, m - 1, n, m, board, visited, dx, dy);
            }
        }

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == 'O' && !visited[i][j]){
                    board[i][j] = 'X';
                }
            }
        }
    }

    //dfs function
    public void dfs(int row, int col, int n, int m, char[][] board, boolean[][] visited, int[] dx, int[] dy){
        //visit
        visited[row][col] = true;
        for(int index = 0; index < 4; index++){
            int nRow = row + dx[index];
            int nCol = col + dy[index];

            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && board[nRow][nCol] == 'O' && !visited[nRow][nCol]){
                dfs(nRow, nCol, n, m, board, visited, dx, dy);
            }
        }
    }
}
