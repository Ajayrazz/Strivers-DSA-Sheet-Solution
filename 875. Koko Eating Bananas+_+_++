class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int low = 1, high = find_max(piles);

        while(low <= high){
            int mid = (low + high) / 2;
            int total_hour = calculateHour(piles, mid);

            if(total_hour <= h){
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }

        return low;
    }

    public int find_max(int[] piles){
        int max_value = Integer.MIN_VALUE;
        for(int pile : piles){
            max_value = Math.max(max_value, pile);
        }

        return max_value;
    }

    public int calculateHour(int[] piles, int hour){
        int total_hour = 0;
        for(int pile : piles){
            total_hour += Math.ceil((double) pile / (double) hour);
        }

        return total_hour;
    }
}
