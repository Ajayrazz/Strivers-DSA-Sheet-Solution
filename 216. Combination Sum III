class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        backtrack(k, n, result, current, 1);
        return result;
    }

    private void backtrack(int k, int n, List<List<Integer>> result, List<Integer> current, int start){
        //Base Case
        if(current.size() == k && n == 0){
            result.add(new ArrayList<>(current));
            return;
        }

        for(int i = start; i <= 9; i++){
            current.add(i);
            backtrack(k, n - i, result, current, i + 1);
            current.remove((Integer)i);
        }
    }
}
