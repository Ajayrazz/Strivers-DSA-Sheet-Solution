class Solution {
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int totSum = 0;
        for(int num : nums){
            totSum += num;
        }

        if(totSum % 2 != 0){
            return false;
        }
        else {
            int target = totSum / 2;
            int[][] dp = new int[n][target + 1];
            for(int[] row : dp){
                Arrays.fill(row, -1);
            }

            return subsetSumUtil(n - 1, target, nums, dp);
        }
    }

    //Helper function
    private boolean subsetSumUtil(int idx, int target, int[] nums, int[][] dp){
        //base case
        if(target == 0) return true;
        if(idx == 0) return nums[0] == target;

        if(dp[idx][target] != -1){
            return dp[idx][target] == 0 ? false : true;
        }

        boolean notTaken = subsetSumUtil(idx - 1, target, nums, dp);
        boolean taken = false;
        if(nums[idx] <= target){
            taken = subsetSumUtil(idx - 1, target - nums[idx], nums, dp);
        }

        dp[idx][target] = notTaken || taken ? 1 : 0;
        return notTaken || taken;
    }
}
