class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n){
        for (int i = 0; i <= n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node){
        if(node == parent.get(node)) return node;
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(rank.get(ulp_u) < rank.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
        }
        else if(rank.get(ulp_v) < rank.get(ulp_u)){
            parent.set(ulp_v, ulp_u);
        }else{
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        } 
    }

    public void unionBySize(int u, int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size.get(ulp_u) < size.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        }else{
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}
class Solution {
    public int largestIsland(int[][] grid) {
        int n = grid.length;
        DisjointSet ds = new DisjointSet(n * n);
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < n ; j++){
                if(grid[i][j] == 0) continue;
                int[] dr = {1,0,-1,0};
                int[] dc = {0,-1,0,1};
                for(int ind = 0 ; ind < 4 ; ind++){
                    int adjr = i + dr[ind];
                    int adjc = j + dc[ind];
                    if(adjr >= 0 && adjr < n && adjc >= 0 && adjc < n && grid[adjr][adjc] == 1){
                        int nodeno = i * n + j;
                        int adjnodeno = adjr * n + adjc;
                        ds.unionBySize(nodeno,adjnodeno);
                    }
                }
            }
        }
        int max = 0;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < n ; j++){
                if(grid[i][j] == 1) continue;
                int[] dr = {1,0,-1,0};
                int[] dc = {0,-1,0,1};
                HashSet<Integer> components = new HashSet<>();
                for(int ind = 0 ; ind < 4 ; ind++){
                    int adjr = i + dr[ind];
                    int adjc = j + dc[ind];
                    if(adjr >= 0 && adjr < n && adjc >= 0 && adjc < n && grid[adjr][adjc] == 1){
                        components.add(ds.findUPar(adjr * n + adjc));
                    }
                }
                int sizeTotal = 0;
                for(Integer parents : components){
                    sizeTotal += ds.size.get(parents);
                }
                max = Math.max(max,sizeTotal + 1);
            }
        }
        // if all cells are 1 or no components can be connected with one 1 then step 2 wont run hence we do this step.
        for(int cellno = 0 ; cellno < n * n ; cellno++){
            max = Math.max(max,ds.size.get(ds.findUPar(cellno)));
        }
        return max;
    }
}
