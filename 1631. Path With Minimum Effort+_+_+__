class Tuple {
    int distance;
    int x;
    int y;
    public Tuple(int distance, int x, int y){
        this.distance = distance;
        this.x = x;
        this.y = y;
    }
}

class Solution {
    public int minimumEffortPath(int[][] heights) {
        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);
        int n = heights.length;
        int m = heights[0].length;
        int[][] dist = new int[n][m];
        //fill the dist with max value
        for(int[] row : dist){
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        //add it to pq
        pq.add(new Tuple(0, 0, 0));

        //down, left, right, up
        int[] dr = {1, 0, 0, -1};
        int[] dc = {0, -1, 1, 0};

        while(!pq.isEmpty()){
            Tuple it = pq.peek();
            pq.remove();
            int difference = it.distance;
            int r = it.x;
            int c = it.y;

            if(r == n - 1 && c == m - 1) return difference;

            for(int i = 0 ; i < 4 ; i++){
                int nr = r + dr[i];
                int nc = c + dc[i];
                
                if(nr >= 0 && nc >= 0 && nr < n && nc < m){
                    int new_effort = Math.max(Math.abs(heights[r][c] - heights[nr][nc]), difference);

                    if(new_effort < dist[nr][nc]){
                        //update and add it to pq
                        dist[nr][nc] = new_effort;
                        pq.add(new Tuple(new_effort, nr, nc));
                    }
                }
            }
        }
        return 0;
    }
}
