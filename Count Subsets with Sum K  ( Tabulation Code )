import java.util.*;

public class Solution {
    static int MOD = 1000000007;

    public static int findWays(int[] nums, int target) {
        int n = nums.length;
        int[][] dp = new int[n][target + 1];

        // Handle base case for index 0
        if (nums[0] == 0) {
            dp[0][0] = 2;  // Include or exclude the 0
        } else {
            dp[0][0] = 1;  // Only exclude
            if (nums[0] <= target) {
                dp[0][nums[0]] = 1;
            }
        }

        for (int i = 1; i < n; i++) {
            for (int t = 0; t <= target; t++) {
                int notTake = dp[i - 1][t];
                int take = 0;
                if (nums[i] <= t) {
                    take = dp[i - 1][t - nums[i]];
                }
                dp[i][t] = (notTake + take) % MOD;
            }
        }

        return dp[n - 1][target];
    }
}
