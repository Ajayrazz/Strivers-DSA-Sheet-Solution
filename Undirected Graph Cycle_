
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int V = adj.size();
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);
        int[] parent = new int[V];
        Arrays.fill(parent, -1);
        
        for(int i = 0; i < V; i++){
            if(visited[i] == false){
                if(checkForCycle(i, visited, adj, parent)){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    //Helper Function For Checking Whether Their Is Cycle In Graph Or Not
    private boolean checkForCycle(int s, boolean[] visited, ArrayList<ArrayList<Integer>> adj, int[] parent){
        Queue<Node> queue = new LinkedList<>();
        queue.add(new Node(s, -1));
        //visit s
        visited[s] = true;
        
        while(!queue.isEmpty()){
            int node = queue.peek().first;
            int par = queue.peek().second;
            queue.remove();
            
            for(Integer it : adj.get(node)){
                if(visited[it] == false){
                    queue.add(new Node(it, node));
                    visited[it] = true;
                }
                else if(par != it){
                    return true;
                }
            }
        }
        
        return false;
    }
}

class Node {
    int first;
    int second;
    public Node(int first, int second){
        this.first = first;
        this.second = second;
    }
}
