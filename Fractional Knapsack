// User function Template for Java
class Solution {
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(List<Integer> val, List<Integer> wt, int capacity) {
        // code here
        int n = val.size();
        // Create array to store value-to-weight ratio and original index
        double[][] ratio = new double[n][2];
        
        // Calculate value-to-weight ratio for each item
        for(int i = 0; i < n; i++) {
            ratio[i][0] = (double)val.get(i) / wt.get(i);  // value/weight ratio
            ratio[i][1] = i;  // original index
        }
        
        // Sort in descending order based on ratio
        Arrays.sort(ratio, (a, b) -> Double.compare(b[0], a[0]));
        
        double maxValue = 0.0;
        int remainingCapacity = capacity;
        
        // Process each item
        for(int i = 0; i < n && remainingCapacity > 0; i++) {
            int idx = (int)ratio[i][1];
            int currWt = wt.get(idx);
            int currVal = val.get(idx);
            
            if(currWt <= remainingCapacity) {
                // Take the whole item
                maxValue += currVal;
                remainingCapacity -= currWt;
            } else {
                // Take a fraction of the item
                double fraction = (double)remainingCapacity / currWt;
                maxValue += currVal * fraction;
                remainingCapacity = 0;
            }
        }
        
        // Round to 6 decimal places
        return Math.round(maxValue * 1000000.0) / 1000000.0;
    }
}
