class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        //fill the dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return maxProfitUtil(0, 0, n, prices, fee, dp);
    }

    public int maxProfitUtil(int index, int buy, int n, int[] prices, int fee, int[][] dp){
        //case 1 : base case
        if(index == n) return 0;
        //case 2
        if(dp[index][buy] != -1) return dp[index][buy];

        int profit = 0;
        if(buy == 0){
            int operation1 = maxProfitUtil(index + 1, 0, n, prices, fee, dp); // do not transaction
            int operation2 = -prices[index] + maxProfitUtil(index + 1, 1, n, prices, fee, dp); // buy the stock

            //update the profit
            profit = Math.max(operation1, operation2);
        } 
        else {
            int operation1 = maxProfitUtil(index + 1, 1, n, prices, fee, dp); // do not transaction
            int operation2 = prices[index] + maxProfitUtil(index + 1, 0, n, prices, fee, dp) - fee; // sell the stock
            //update the profit
            profit = Math.max(operation1, operation2);
        }

        //update dp and return it
        return dp[index][buy] = profit;
    }
}
